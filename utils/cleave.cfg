#textdomain wesnoth-Era_of_Magic

#define EOMA_AOE_HARM_UNIT_ATTACK

    [harm_unit]
        [filter]
            x,y=$this_item.x,$this_item.y
            [filter_side]
                [enemy_of]
                    side=$unit.side
                [/enemy_of]
            [/filter_side]
            [not]
                [filter_wml]
                    [status]
                        petrified=yes
                    [/status]
                [/filter_wml]
            [/not]
        [/filter]
        [filter_second]
            x,y=$x1,$y1
        [/filter_second]
        amount=$areadmg
        damage_type=$weapon.type
        alignment=$unit.alignment
        fire_event=yes
        animate=defender
        delay=0
        experience=no
    [/harm_unit]
    [harm_unit]
        [filter]
            x,y=$this_item.x,$this_item.y
            [filter_side]
                [allied_with]
                    side=$unit.side
                [/allied_with]
                [or]
                    side=$unit.side
                [/or]
            [/filter_side]
        [/filter]
        [filter_second]
            x,y=$x1,$y1
        [/filter_second]
        amount=$areadmg
        damage_type=$weapon.type
        alignment=$unit.alignment
        fire_event=yes
        animate=defender
        kill=no
        delay=0
        experience=no
    [/harm_unit]
#enddef

#define EOMA_AOE_HARM_UNIT_DEFENSE

    [harm_unit]
        [filter]
            x,y=$this_item.x,$this_item.y
            [filter_side]
                [enemy_of]
                    side=$second_unit.side
                [/enemy_of]
            [/filter_side]
            [not]
                [filter_wml]
                    [status]
                        petrified=yes
                    [/status]
                [/filter_wml]
            [/not]
        [/filter]
        [filter_second]
            x,y=$x2,$y2
        [/filter_second]
        amount=$areadmg
        damage_type=$second_weapon.type
        alignment=$second_unit.alignment
        fire_event=yes
        animate=defender
        delay=0
        experience=no
    [/harm_unit]
    [harm_unit]
        [filter]
            x,y=$this_item.x,$this_item.y
            [filter_side]
                [allied_with]
                    side=$second_unit.side
                [/allied_with]
                [or]
                    side=$second_unit.side
                [/or]
            [/filter_side]
            [not]
                [filter_wml]
                    [status]
                        petrified=yes
                    [/status]
                [/filter_wml]
            [/not]
        [/filter]
        [filter_second]
            x,y=$x2,$y2
        [/filter_second]
        amount=$areadmg
        damage_type=$second_weapon.type
        alignment=$second_unit.alignment
        fire_event=yes
        animate=defender
        kill=no
        delay=0
        experience=no
    [/harm_unit]
#enddef

#define WEAPON_SPECIAL_EOMA_CLEAVE_CUSTOM VALUE DISPLAYVALUE
# wmlindent: start ignoring
# wmlxgettext: [attack]
# wmlxgettext: [specials]

# wmlindent: stop ignoring
    [dummy]
        id=eoma_cleave{DISPLAYVALUE}
        name= _ "cleave"+" "+{DISPLAYVALUE}+"%"
        description=_"A unit with this ability can hurt units that are adjacent to the attacker and the defender at the same time. The damage dealt equals a specified % of the base damage.
This ability does not work against berserker attacks.
This ability works even when defending.
This ability works even against allies.
Secondary target may be hit even when primary attack misses.
Chance to hit secondary target: 50%
Base damage multiplier:"+" "+{DISPLAYVALUE}+"%"+" "+{EOMA_NO_RPG}
        [filter_opponent]
            [filter_weapon]
                [not]
                    special_type_active=berserk
                [/not]
            [/filter_weapon]
        [/filter_opponent]
    [/dummy]
[/specials]
# wmlindent: start ignoring
[/attack]
# wmlindent: stop ignoring

[event]
    name=attacker hits,attacker misses
    first_time_only=no
    id=eoma_cleave{DISPLAYVALUE}_event
    [filter_attack]
        special_id_active=eoma_cleave{DISPLAYVALUE}
    [/filter_attack]
    [filter_second_attack]
        [not]
            special_type_active=berserk
        [/not]
    [/filter_second_attack]
#ifdef MULTIPLAYER
    [filter_condition]
        [EoMa_not_rpg]
        [/EoMa_not_rpg]
    [/filter_condition]
#endif

    [store_unit]
        [filter]
            [filter_adjacent]
                x,y=$x2,$y2
            [/filter_adjacent]
            [filter_adjacent]
                x,y=$x1,$y1
            [/filter_adjacent]
            [not]
                [filter_wml]
                    [status]
                        petrified=yes
                    [/status]
                [/filter_wml]
            [/not]
        [/filter]
        variable=bystander
    [/store_unit]

    {VARIABLE areadmg $weapon.damage}
    {VARIABLE_OP areadmg multiply {VALUE}}

    [if]
        {VARIABLE_CONDITIONAL unit.status.slowed boolean_equals yes}
        [then]
            {VARIABLE_OP areadmg divide 2}
            {VARIABLE_OP areadmg round floor}
        [/then]
    [/if]

    [foreach]
        array=bystander
        [do]
            {RANDOM 1..100}
            [if]
                {VARIABLE_CONDITIONAL random less_than_equal_to 50}
                [then]
                    [EoMa_remember_indirectly_damaged_unit]
                        x,y=$this_item.x,$this_item.y
                    [/EoMa_remember_indirectly_damaged_unit]
                    {EOMA_AOE_HARM_UNIT_ATTACK}
                    [EoMa_trigger_pain_absorbation_aura_on_location]
                        x,y=$this_item.x,$this_item.y
                        #in pain absorb event, primary unit should be the damaged unit
                        #                        primary_unit=$unit.id
                        primary_unit=$this_item.id
                    [/EoMa_trigger_pain_absorbation_aura_on_location]
                [/then]
            [/if]
        [/do]
    [/foreach]
    {CLEAR_VARIABLE bystander}
[/event]

[event]
    name=defender hits,defender misses
    first_time_only=no
    id=eoma_cleave{DISPLAYVALUE}_event2
    [filter_second_attack]
        special_id_active=eoma_cleave{DISPLAYVALUE}
    [/filter_second_attack]
    [filter_attack]
        [not]
            special_type_active=berserk
        [/not]
    [/filter_attack]
#ifdef MULTIPLAYER
    [filter_condition]
        [EoMa_not_rpg]
        [/EoMa_not_rpg]
    [/filter_condition]
#endif

    [store_unit]
        [filter]
            [filter_adjacent]
                x,y=$x1,$y1
            [/filter_adjacent]
            [filter_adjacent]
                x,y=$x2,$y2
            [/filter_adjacent]
            [not]
                [filter_wml]
                    [status]
                        petrified=yes
                    [/status]
                [/filter_wml]
            [/not]
        [/filter]
        variable=bystander
    [/store_unit]

    {VARIABLE areadmg $second_weapon.damage}
    {VARIABLE_OP areadmg multiply {VALUE}}

    [if]
        {VARIABLE_CONDITIONAL second_unit.status.slowed boolean_equals yes}
        [then]
            {VARIABLE_OP areadmg divide 2}
            {VARIABLE_OP areadmg round floor}
        [/then]
    [/if]

    [foreach]
        array=bystander
        [do]
            {RANDOM 1..100}
            [if]
                {VARIABLE_CONDITIONAL random less_than_equal_to 50}
                [then]
                    [EoMa_remember_indirectly_damaged_unit]
                        x,y=$this_item.x,$this_item.y
                    [/EoMa_remember_indirectly_damaged_unit]
                    {EOMA_AOE_HARM_UNIT_DEFENSE}
                    [EoMa_trigger_pain_absorbation_aura_on_location]
                        x,y=$this_item.x,$this_item.y
                        #in pain absorb event, primary unit should be the damaged unit
                        #                        primary_unit=$second_unit.id
                        primary_unit=$this_item.id
                    [/EoMa_trigger_pain_absorbation_aura_on_location]
                [/then]
            [/if]
        [/do]
    [/foreach]
[/event]

{EOMA_INDIRECTLY_DAMAGED_UNIT_EXPERIENCE_EVENT}

[+attack]
# wmlindent: start ignoring

[+specials]
# wmlxgettext: [/specials]
# wmlxgettext: [/attack]
# wmlindent: stop ignoring
#enddef
